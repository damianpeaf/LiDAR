#include <stdio.h>
#include <string.h>
#include <math.h>
#include <limits.h>
#include "pico/stdlib.h"
#include "hardware/uart.h"
#include "hardware/gpio.h"
#include "pico/time.h"

// Configuración UART
#define UART_ID uart1
#define BAUD_RATE 230400
#define UART_TX_PIN 8
#define UART_RX_PIN 9

// Constantes LIDAR
#define HEADER 0x54
#define POINT_PER_PACK 12
#define FRAME_SIZE 47

// Configuración del reporte
#define REPORT_INTERVAL_SECONDS 30
#define MAX_ANGLE_BUCKETS 3600 // 0.1 grados de resolución

// Tabla CRC
static const uint8_t CRC_TABLE[256] = {
    0x00, 0x4d, 0x9a, 0xd7, 0x79, 0x34, 0xe3, 0xae, 0xf2, 0xbf, 0x68, 0x25, 0x8b, 0xc6, 0x11, 0x5c,
    0xa9, 0xe4, 0x33, 0x7e, 0xd0, 0x9d, 0x4a, 0x07, 0x5b, 0x16, 0xc1, 0x8c, 0x22, 0x6f, 0xb8, 0xf5,
    0x1f, 0x52, 0x85, 0xc8, 0x66, 0x2b, 0xfc, 0xb1, 0xed, 0xa0, 0x77, 0x3a, 0x94, 0xd9, 0x0e, 0x43,
    0xb6, 0xfb, 0x2c, 0x61, 0xcf, 0x82, 0x55, 0x18, 0x44, 0x09, 0xde, 0x93, 0x3d, 0x70, 0xa7, 0xea,
    0x3e, 0x73, 0xa4, 0xe9, 0x47, 0x0a, 0xdd, 0x90, 0xcc, 0x81, 0x56, 0x1b, 0xb5, 0xf8, 0x2f, 0x62,
    0x97, 0xda, 0x0d, 0x40, 0xee, 0xa3, 0x74, 0x39, 0x65, 0x28, 0xff, 0xb2, 0x1c, 0x51, 0x86, 0xcb,
    0x21, 0x6c, 0xbb, 0xf6, 0x58, 0x15, 0xc2, 0x8f, 0xd3, 0x9e, 0x49, 0x04, 0xaa, 0xe7, 0x30, 0x7d,
    0x88, 0xc5, 0x12, 0x5f, 0xf1, 0xbc, 0x6b, 0x26, 0x7a, 0x37, 0xe0, 0xad, 0x03, 0x4e, 0x99, 0xd4,
    0x7c, 0x31, 0xe6, 0xab, 0x05, 0x48, 0x9f, 0xd2, 0x8e, 0xc3, 0x14, 0x59, 0xf7, 0xba, 0x6d, 0x20,
    0xd5, 0x98, 0x4f, 0x02, 0xac, 0xe1, 0x36, 0x7b, 0x27, 0x6a, 0xbd, 0xf0, 0x5e, 0x13, 0xc4, 0x89,
    0x63, 0x2e, 0xf9, 0xb4, 0x1a, 0x57, 0x80, 0xcd, 0x91, 0xdc, 0x0b, 0x46, 0xe8, 0xa5, 0x72, 0x3f,
    0xca, 0x87, 0x50, 0x1d, 0xb3, 0xfe, 0x29, 0x64, 0x38, 0x75, 0xa2, 0xef, 0x41, 0x0c, 0xdb, 0x96,
    0x42, 0x0f, 0xd8, 0x95, 0x3b, 0x76, 0xa1, 0xec, 0xb0, 0xfd, 0x2a, 0x67, 0xc9, 0x84, 0x53, 0x1e,
    0xeb, 0xa6, 0x71, 0x3c, 0x92, 0xdf, 0x08, 0x45, 0x19, 0x54, 0x83, 0xce, 0x60, 0x2d, 0xfa, 0xb7,
    0x5d, 0x10, 0xc7, 0x8a, 0x24, 0x69, 0xbe, 0xf3, 0xaf, 0xe2, 0x35, 0x78, 0xd6, 0x9b, 0x4c, 0x01,
    0xf4, 0xb9, 0x6e, 0x23, 0x8d, 0xc0, 0x17, 0x5a, 0x06, 0x4b, 0x9c, 0xd1, 0x7f, 0x32, 0xe5, 0xa8};

// Estructura para estadísticas de rendimiento
typedef struct
{
    // Datos generales
    uint64_t start_time_us;
    uint32_t bytes_received;
    uint32_t bytes_processed;
    uint32_t frames_received;
    uint32_t frames_processed;
    uint32_t points_processed;

    // Errores
    uint32_t header_errors;
    uint32_t size_errors;
    uint32_t uart_timeouts;
    uint32_t crc_errors;

    // Tiempos de operación
    uint64_t total_crc_time_us;
    uint64_t total_parsing_time_us;
    uint64_t total_uart_time_us;
    uint64_t min_frame_time_us;
    uint64_t max_frame_time_us;
    uint64_t frame_times_sum_us;

    // Datos del LIDAR
    float min_angle;
    float max_angle;
    uint16_t min_distance;
    uint16_t max_distance;
    uint8_t min_intensity;
    uint8_t max_intensity;
    uint64_t intensity_sum;

    // Cobertura angular
    bool angle_covered[MAX_ANGLE_BUCKETS];

} performance_stats_t;

// Estructura para un punto LIDAR
typedef struct
{
    float angle;
    uint16_t distance;
    uint8_t intensity;
    bool valid;
} lidar_point_t;

static performance_stats_t stats = {0};

// Función para calcular CRC8
uint8_t calc_crc8(const uint8_t *data, size_t len)
{
    uint8_t crc = 0;
    for (size_t i = 0; i < len; i++)
    {
        crc = CRC_TABLE[(crc ^ data[i]) & 0xff];
    }
    return crc;
}

// Función para actualizar estadísticas de ángulo
void update_angle_stats(float angle)
{
    // Actualizar min/max
    if (stats.points_processed == 1 || angle < stats.min_angle)
    {
        stats.min_angle = angle;
    }
    if (stats.points_processed == 1 || angle > stats.max_angle)
    {
        stats.max_angle = angle;
    }

    // Marcar bucket de cobertura angular (resolución 0.1 grados)
    int bucket = (int)(angle * 10.0f);
    if (bucket >= 0 && bucket < MAX_ANGLE_BUCKETS)
    {
        stats.angle_covered[bucket] = true;
    }
}

// Función para actualizar estadísticas de distancia
void update_distance_stats(uint16_t distance)
{
    if (stats.points_processed == 1 || distance < stats.min_distance)
    {
        stats.min_distance = distance;
    }
    if (stats.points_processed == 1 || distance > stats.max_distance)
    {
        stats.max_distance = distance;
    }
}

// Función para actualizar estadísticas de intensidad
void update_intensity_stats(uint8_t intensity)
{
    if (stats.points_processed == 1 || intensity < stats.min_intensity)
    {
        stats.min_intensity = intensity;
    }
    if (stats.points_processed == 1 || intensity > stats.max_intensity)
    {
        stats.max_intensity = intensity;
    }
    stats.intensity_sum += intensity;
}

// Función para parsear los puntos del frame
int parse_points(const uint8_t *frame, lidar_point_t *points)
{
    uint64_t crc_start = time_us_64();

    // Verificar CRC
    bool crc_valid = (calc_crc8(frame, FRAME_SIZE - 1) == frame[FRAME_SIZE - 1]);

    uint64_t crc_end = time_us_64();
    stats.total_crc_time_us += (crc_end - crc_start);

    if (!crc_valid)
    {
        stats.crc_errors++;
        return 0;
    }

    uint64_t parsing_start = time_us_64();

    // Extraer ángulos inicial y final (little endian)
    uint16_t start_angle_raw = (uint16_t)(frame[5] << 8) | frame[4];
    uint16_t end_angle_raw = (uint16_t)(frame[43] << 8) | frame[42];

    float start_angle = start_angle_raw / 100.0f;
    float end_angle = end_angle_raw / 100.0f;

    // Ajustar ángulo final si es menor que el inicial
    if (end_angle < start_angle)
    {
        end_angle += 360.0f;
    }

    // Calcular paso angular
    float step = (end_angle - start_angle) / (POINT_PER_PACK - 1);

    int valid_points = 0;

    // Procesar cada punto
    for (int i = 0; i < POINT_PER_PACK; i++)
    {
        int offset = 6 + i * 3;

        // Extraer distancia e intensidad (little endian)
        uint16_t distance = (uint16_t)(frame[offset + 1] << 8) | frame[offset];
        uint8_t intensity = frame[offset + 2];

        // Calcular ángulo para este punto
        float angle = fmodf(start_angle + step * i, 360.0f);

        // Solo agregar puntos válidos (distancia > 0)
        if (distance > 0)
        {
            points[valid_points].angle = roundf(angle * 10.0f) / 10.0f;
            points[valid_points].distance = distance;
            points[valid_points].intensity = intensity;
            points[valid_points].valid = true;

            // Actualizar estadísticas
            stats.points_processed++;
            update_angle_stats(points[valid_points].angle);
            update_distance_stats(distance);
            update_intensity_stats(intensity);

            valid_points++;
        }
    }

    uint64_t parsing_end = time_us_64();
    stats.total_parsing_time_us += (parsing_end - parsing_start);

    return valid_points;
}

// Función para leer un byte del UART con timeout
bool uart_read_byte_timeout(uart_inst_t *uart, uint8_t *byte, uint32_t timeout_ms)
{
    uint64_t start_time = time_us_64();
    uint64_t timeout_us = timeout_ms * 1000ULL;

    while (time_us_64() - start_time < timeout_us)
    {
        if (uart_is_readable(uart))
        {
            *byte = uart_getc(uart);
            return true;
        }
        sleep_us(100);
    }
    stats.uart_timeouts++;
    return false;
}

// Función para leer múltiples bytes del UART con timeout
bool uart_read_bytes_timeout(uart_inst_t *uart, uint8_t *buffer, size_t len, uint32_t timeout_ms)
{
    uint64_t start_time = time_us_64();

    for (size_t i = 0; i < len; i++)
    {
        if (!uart_read_byte_timeout(uart, &buffer[i], timeout_ms))
        {
            stats.size_errors++;
            return false;
        }
    }

    uint64_t end_time = time_us_64();
    stats.total_uart_time_us += (end_time - start_time);
    stats.bytes_received += len;

    return true;
}

// Función para limpiar el buffer UART
void uart_clear_buffer(uart_inst_t *uart)
{
    while (uart_is_readable(uart))
    {
        uart_getc(uart);
        stats.bytes_received++;
    }
}

// Función para calcular cobertura angular
float calculate_angular_coverage()
{
    int covered_buckets = 0;
    for (int i = 0; i < MAX_ANGLE_BUCKETS; i++)
    {
        if (stats.angle_covered[i])
        {
            covered_buckets++;
        }
    }
    return (float)covered_buckets / 3600.0f * 100.0f; // 360 grados = 3600 buckets de 0.1°
}

// Función para imprimir el reporte
void print_performance_report()
{
    uint64_t total_time_us = time_us_64() - stats.start_time_us;
    float total_time_s = total_time_us / 1000000.0f;

    printf("\n");
    printf("============================================================\n");
    printf("REPORTE DE RENDIMIENTO - LIDAR PICO SDK C\n");
    printf("============================================================\n");
    printf("Tiempo de ejecución: %.2f segundos\n", total_time_s);
    printf("Frecuencia de muestreo UART: %d baud\n", BAUD_RATE);
    printf("\n");

    printf("--- DATOS PROCESADOS ---\n");
    printf("Bytes recibidos: %u\n", stats.bytes_received);
    printf("Bytes procesados: %u\n", stats.bytes_processed);
    printf("Frames recibidos: %u\n", stats.frames_received);
    printf("Frames procesados exitosos: %u\n", stats.frames_processed);
    printf("Puntos LIDAR procesados: %u\n", stats.points_processed);
    printf("\n");

    printf("--- TASAS DE PROCESAMIENTO ---\n");
    if (total_time_s > 0)
    {
        printf("Bytes/s: %.0f\n", stats.bytes_received / total_time_s);
        printf("Frames/s: %.1f\n", stats.frames_processed / total_time_s);
        printf("Puntos/s: %.0f\n", stats.points_processed / total_time_s);
    }
    printf("\n");

    printf("--- ERRORES ---\n");
    printf("Errores de header: %u\n", stats.header_errors);
    printf("Errores de tamaño: %u\n", stats.size_errors);
    printf("Timeouts UART: %u\n", stats.uart_timeouts);
    if (stats.frames_received > 0)
    {
        float error_rate = ((float)(stats.frames_received - stats.frames_processed) / stats.frames_received) * 100.0f;
        printf("Tasa de error: %.2f%%\n", error_rate);
    }
    printf("\n");

    printf("--- TIEMPOS DE OPERACIÓN (microsegundos) ---\n");
    printf("Tiempo total en cálculo CRC: %llu\n", stats.total_crc_time_us);
    printf("Tiempo total en parsing: %llu\n", stats.total_parsing_time_us);
    printf("Tiempo total en lectura UART: %llu\n", stats.total_uart_time_us);
    if (stats.frames_processed > 0)
    {
        printf("Tiempo promedio por frame: %llu µs\n", stats.frame_times_sum_us / stats.frames_processed);
        printf("Tiempo mínimo por frame: %llu µs\n", stats.min_frame_time_us);
        printf("Tiempo máximo por frame: %llu µs\n", stats.max_frame_time_us);
        printf("Tiempo promedio CRC por frame: %llu µs\n", stats.total_crc_time_us / stats.frames_processed);
        printf("Tiempo promedio parsing por frame: %llu µs\n", stats.total_parsing_time_us / stats.frames_processed);
    }
    printf("\n");

    printf("--- DATOS DEL LIDAR ---\n");
    if (stats.points_processed > 0)
    {
        printf("Rango de ángulos: %.1f° - %.1f°\n", stats.min_angle, stats.max_angle);

        // Calcular ángulos únicos cubiertos
        int unique_angles = 0;
        for (int i = 0; i < MAX_ANGLE_BUCKETS; i++)
        {
            if (stats.angle_covered[i])
                unique_angles++;
        }
        printf("Ángulos únicos cubiertos: %d\n", unique_angles);
        printf("Cobertura angular: %.1f%%\n", calculate_angular_coverage());

        printf("Distancia mínima: %u mm\n", stats.min_distance);
        printf("Distancia máxima: %u mm\n", stats.max_distance);
        printf("Intensidad mínima: %u\n", stats.min_intensity);
        printf("Intensidad máxima: %u\n", stats.max_intensity);
        printf("Intensidad promedio: %.1f\n", (float)stats.intensity_sum / stats.points_processed);
    }
    printf("\n");

    printf("--- EFICIENCIA ---\n");
    if (stats.frames_received > 0)
    {
        float success_rate = ((float)stats.frames_processed / stats.frames_received) * 100.0f;
        printf("Tasa de éxito de frames: %.2f%%\n", success_rate);
    }
    if (total_time_us > 0)
    {
        printf("CPU usado en CRC: %.2f%%\n", ((float)stats.total_crc_time_us / total_time_us) * 100.0f);
        printf("CPU usado en parsing: %.2f%%\n", ((float)stats.total_parsing_time_us / total_time_us) * 100.0f);
        printf("CPU usado en UART: %.2f%%\n", ((float)stats.total_uart_time_us / total_time_us) * 100.0f);
    }
    printf("============================================================\n");
    printf("\n");
}

int main()
{
    // Inicializar stdio
    stdio_init_all();

    // Configurar UART
    uart_init(UART_ID, BAUD_RATE);

    // Configurar pines GPIO para UART
    gpio_set_function(UART_TX_PIN, GPIO_FUNC_UART);
    gpio_set_function(UART_RX_PIN, GPIO_FUNC_UART);

    // Configurar formato UART (8 bits de datos, 1 bit de parada, sin paridad)
    uart_set_format(UART_ID, 8, 1, UART_PARITY_NONE);

    printf("LIDAR Reader con reporte de rendimiento iniciado\n");
    printf("UART configurado: %d baud, TX pin %d, RX pin %d\n", BAUD_RATE, UART_TX_PIN, UART_RX_PIN);
    printf("Reporte se generará cada %d segundos\n\n", REPORT_INTERVAL_SECONDS);

    // Inicializar estadísticas
    memset(&stats, 0, sizeof(stats));
    stats.start_time_us = time_us_64();
    stats.min_frame_time_us = UINT64_MAX;

    uint8_t frame[FRAME_SIZE];
    lidar_point_t points[POINT_PER_PACK];

    // Limpiar buffer inicial
    uart_clear_buffer(UART_ID);

    while (true)
    {
        uint64_t frame_start_time = time_us_64();

        uint8_t byte;

        // Buscar el header
        uint64_t uart_start = time_us_64();
        if (!uart_read_byte_timeout(UART_ID, &byte, 1000))
        {
            continue;
        }

        if (byte != HEADER)
        {
            stats.header_errors++;
            continue;
        }

        stats.bytes_received++; // Contar el header

        // Leer el resto del frame
        frame[0] = HEADER;
        if (!uart_read_bytes_timeout(UART_ID, &frame[1], FRAME_SIZE - 1, 100))
        {
            continue;
        }

        stats.frames_received++;
        stats.bytes_processed += FRAME_SIZE;

        // Parsear los puntos
        int num_points = parse_points(frame, points);

        if (num_points > 0)
        {
            stats.frames_processed++;

            // Calcular tiempo del frame
            uint64_t frame_end_time = time_us_64();
            uint64_t frame_time = frame_end_time - frame_start_time;

            stats.frame_times_sum_us += frame_time;
            if (frame_time < stats.min_frame_time_us)
            {
                stats.min_frame_time_us = frame_time;
            }
            if (frame_time > stats.max_frame_time_us)
            {
                stats.max_frame_time_us = frame_time;
            }

            // Imprimir algunos puntos para verificación (opcional)
            if (stats.frames_processed <= 3)
            {
                for (int i = 0; i < num_points && i < 3; i++)
                {
                    printf("Ángulo: %.1f°  Distancia: %d mm  Intensidad: %d\n",
                           points[i].angle, points[i].distance, points[i].intensity);
                }
            }
        }

        // Generar reporte cada REPORT_INTERVAL_SECONDS segundos
        uint64_t current_time = time_us_64();
        if (current_time - stats.start_time_us >= REPORT_INTERVAL_SECONDS * 1000000ULL)
        {
            print_performance_report();

            // Reiniciar estadísticas para el siguiente intervalo
            memset(&stats, 0, sizeof(stats));
            stats.start_time_us = current_time;
            stats.min_frame_time_us = UINT64_MAX;
        }
    }

    return 0;
}